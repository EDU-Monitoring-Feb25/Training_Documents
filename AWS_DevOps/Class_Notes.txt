
			
#######################
Day 3 - 22nd Feb. 2025
#######################				
			
	Monitor using Prometheus/Grafana 
	
	About Nagios - Logger Tools 
	
	AWS DevOps Services :
	
		- AWS IAM User 
		
		
		- SDLC 
		
		- AWS DevOps Services 
			
			- Code Commit 
			- Code Build,............
			
			
		Jenkins Server --> Config File
		
			Monitored using Nagios/Splunk 
			
			It is used capture the logs/config changes.
			
			Jenkins - Console Output?
			
		
	
#######################
Day 4 - 23rd Feb. 2025
#######################		

	AWS DevOps Services :	
	
		- IAM 
		
		- S3 Bucket			# Used to maintain the Artifacts 		
	
		- AWS Code Commit 
		
		- AWS Code Build 
		
		- AWS Code Deploy 
		
		- AWS Code Pipeline 
		
	
	Micro-Service based application Architecture :
	
		- Container Services 
		
			- AWS Container Service 		--> Docker Engine 	# To Create Container Images and Continers 
			
			- AWS Container Registry 		--> DockerHub		# Maintain/Store the Container Images 
			
			- AWS Kubernetes Service
			
			
	AWS EBS
	
	
	Web Application : Java Springboot Web Application 
	
		Project Folder/Repository  :
		
		
		Source Code repository --> 
		
			SRC 
				- main 
				- test 		
				
			pom.xml 
	
			Dockerfile 
			
			Kubernetes_Manifest.yaml 
			
		Jenkins pipeline =>  to automate application build and deployments in Kubernetes_Cluser ?
		
	
#######################
Day 5 - 1st Mar. 2025
#######################			
		
		
	AWS Code Build :
	
		Perform Application build 
		
			--> Create Application Artifacts
			--> Save the Artifacts in s3 Bucket
			
			
		Java Springboot Web Application --> Maven Build and Create Artifacts --> *.war
		
		
		Prepare the Source Code Repository .
		
		
		
		1. Create AWS s3 Bucket --> edu-s3-cbproj1							# Maintain the Application Artifacts
		
			- Create a Folder in S3 Bucket 
		
			s3://edu-s3-cbproj1/edu-s3-cbproj1-folder1/
		
			https://edu-s3-cbproj1.s3.ap-south-1.amazonaws.com/edu-s3-cbproj1-folder1/
			
			
		2. Create a AWS Code-Build Project 
		
		
				- Pre-requisites :
				
						Source Code Repository - Java Maven Web Application
						
							- pom.xml 
							- buildspec.yaml			# Define the Build Specifications 
														# Define Maven Goals
														
				- Build Environment --> 
				
		

		Deployment :::		
		
			- Copy the artifacts from the s3 Bucket to Target Application Server(QA/UAT/Prod) 
		
			- For Any Micro-Service Service Based Application Architecture ::
			
				- Use the Application Artifacts and Create Application Container Image(Docker)
		
			
		
		3. Application Image Creation :::
		
			
			Containerization ::: Is a process of packaging the application along with its dependencies 
		
					*.war / *.jar / *.exec / *.dll 
					
				Dev Environment :
				
					Application build -> mywebapp1.war 
					
					Unit Test using the mywebapp1.war 
					
						Run the mywebapp1.war to perform Unit Testing 
						
						Web Application Server (WAS) : Tomcat / Apache httpd / nginx
						
						
							jdk_17,tomcat_v8.5
							
						Package the Application :

							Creating the Container Image : (mywebapp1.war,jdk_17,tomcat_v8.5)	==> mywebapp1-img:v1.0
							
							Published to Container Registry 
								DockerHub 
								
							AWS : 
							
								- AWS - Container Service - ECS			# Create and manage the Container Images and Containers
								
								- AWS - Container Registry - ECR		# Save the Contianer Images
								
								- AWS - Kubernetes Service - EKS		# Container Orchestration Tool 
							
							
						
						Promote the mywebapp1.war to Target Environments (QA_Server)
						
						
						
						
						
				QA_Server : 	mywebapp1.war				# Upon Deployment 
				
				
						Web Application Server (WAS) : jdk_17,tomcat_v8.5
						
						jdk_8,tomcat_v8
					
					
				UAT_Server
				
				Prod_Server 
				

	ECR 
	
	Connect to AWS using AWS CLI 
	
	work with docker images and publish to ECR 
	
	
	
	On the Build Server :
	
		# Install and Setup the AWS Cli
		
		snap install aws-cli --classic
		
		aws --version
		
		# Create AWS Access Key & Secret Keys
				-- using aws iam console - security credential page
		
		aws configure 		To configure the credential.
			- Access Key 
			- Secret Key 
			- Default Region ap-south-1
			
		Python scripts ==> to handle aws resources 
		boto3 
	


loksaieta/sa-webappimg

Retrieve an authentication token and authenticate your Docker client to your registry. Use the AWS CLI:

Install AWS CLI 

aws configure 




Retrieve an authentication token and authenticate your Docker client to your registry. Use the AWS CLI:

aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 682033467551.dkr.ecr.ap-south-1.amazonaws.com

Note: If you receive an error using the AWS CLI, make sure that you have the latest version of the AWS CLI and Docker installed.

Build your Docker image using the following command. For information on building a Docker file from scratch see the instructions here . You can skip this step if your image is already built:

docker build -t edu-crrepo1 .

After the build completes, tag your image so you can push the image to this repository:

docker tag edu-crrepo1:latest 682033467551.dkr.ecr.ap-south-1.amazonaws.com/edu-crrepo1:latest

Run the following command to push this image to your newly created AWS repository:

docker push 682033467551.dkr.ecr.ap-south-1.amazonaws.com/edu-crrepo1:latest



docker build -t edu-crrepo1 .

How to Create Docker Container Images ?

	- Docker Commit 		# Used to Create a Container Image based on the existing Container reference
	
	- Docker Build 			# Used to Create a Container Image based on the Dockerfile definitions
							# Dockerfile of Instructions
							
		from 
		
		copy 		# copy files from host volume to container volume
		
		cp 			# cp is used to copy the files within the container volume 
		
		add         # add https://mywebapp1s301.s3.ap-south-1.amazonaws.com/javamvnartifacts1/target/loksaieta.war /usr/local/tomcat/webapps
		
		workdir		# set the current working dir
		
		expose 		# 8080
		
		run 		# apt
		
		env 		# set evni var - Home path
		
		cmd			# set the container start-up command/task 
					# It can be modified during container creation time
		
		entrypoint  # set the container start-up command/task
					# It cannot be modified during container creation time
					
					
- Code Deploy 

- Code Pipeline 

- Cloud-formation to create aws resources



#######################
Day 6 - 2nd Mar. 2025
#######################	


	Code Build :
	
		- Create Artifact --> stored in the s3 Bucket 
		
		target/*.war

	Code Deploy 
	
		- appspec.yaml 
		
	Target Server :
	
		- QA_Server :
		
			--> jdk,tomcat 
			--> codedeploy agent 
			--> Tomcat Service is up and running.
			
	IAM Services :
	
		--> User 
		--> Group 
		--> Roles 		
		--> Policies 
		
	

	IAM Roles & Policies :::
	
	Created IAM Role for Code Deploy 	
	
	Created IAM Policy for S3 Bucket access 

	Create IAM Role for EC2 Instance and attached thie IAM Policy for S3 Bucket access
	
	Launch
	
		--> UserData? Startup Task :
		
			--> Install the CodeDeploy Agent 
			
			
			
	Cloud-Formation Templates :::
	
		- IAC Tool - Used to Provision AWS Resources
		
	
	Elastic BeanStalk
		
		
		
	User 1 --> S3 --> policy 
	
	CodeBuild Service --> Access EC2 Instance(Build Server) --> IAM Role
	
	CodeDeploy Service --> Access EC2 Instance(Tomcat) --> IAM Role
	
	****Azure DevOps Services!

	Code Pipeline is an integration of CodeBuild & CodeDeploy
	
	
	loksai-webapp-cb-proj1
	
	https://github.com/EDU-Monitoring-Feb25/devops-java-webapp.git
	
	
Ubuntu :: Setup the CodeDeploy Agent:

#!/bin/bash
sudo apt update -y
sudo apt install ruby -y
sudo apt install wget
cd /home/ubuntu
wget https://aws-codedeploy-ap-south-1.s3.ap-south-1.amazonaws.com/latest/install
chmod +x ./install
sudo ./install auto


//sudo apt install openjdk-17-jre -y					# Based on the Application
//sudo apt -y install tomcat10							# Manually Install req. version


#####################Install TOMCAT Application Server on Ubuntu :::

Launch New Node - Ubuntu - 22.04 ami 

Enable port 8080

Install Tomcat ::  https://tomcat.apache.org/download-80.cgi

sudo -i
apt update -y
apt-get install default-jdk -y
java --version
cd /opt/
wget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.99/bin/apache-tomcat-8.5.99.tar.gz
tar -xvzf /opt/apache-tomcat-8.5.99.tar.gz
mv apache-tomcat-8.5.99 tomcat
cd tomcat/bin/
./startup.sh			# Used to Start the Tomcat Server 

Open web browser :

http://<Public_IP_Address>:8080/

E.g.: http://13.127.8.53:8080/

Tomcat runs in port 8080 


syntax:

wget https://<bucket-name>.s3.<region-identifier>.amazonaws.com/latest/install

bucket-name: aws-codedeploy-ap-south-1

region-identifier: ap-south-1

https://aws-codedeploy-ap-south-1.s3.ap-south-1.amazonaws.com/latest/install



systemctl status codedeploy-agent

systemctl start codedeploy-agent

systemctl status codedeploy-agent


Verify Installation using User Data
----------------------------------
sudo service codedeploy-agent status
sudo java -version




#######################
Day 7 - 8th Mar. 2025
#######################	


	--> GitOps :::
	
	
	
	Infra-Structure Provisioning	==> Terraform/Cloud-formation/Azurerm
	
	Infra-Structure Configuration 	==> Ansible/Cloud-formation/Azurerm
	
	
	DevOps CICD ::

		-> Pre-requisites to execute CICD Pipeline Project?
		
		-> Build server/target server should ready
		
		
	Jenkins Pipeline :
	
	Stages of pipeline :::
	
		- SCM_Checkout 	# Download the source code from github repo to build server 
		
		- Application Build 
		
		- Create Artifacts
		
		- Deploy to Target Server(Test Environment)
		
		
	Scenario 1: 

		Pipeline 1 :
		
		
		SCM_Checkout	-->		Application	Build	--> 	Create Artifacts	-->		Deploy to QA_Server



	Scenario 2:

		Pipeline 1 :

		SCM_Checkout	-->		Create New_QA_Server(Terraform)	--> 	Configure New_QA_Server(Ansible)
		
		Pipeline 2 :		
		
		SCM_Checkout	-->		Application	Build	--> 	Create Artifacts	-->		Deploy to New_QA_Server
		
		
		
	Scenario 3:

		Pipeline 1 :

		SCM_Checkout	-->		Application	Build	--> 	Create Artifacts	-->		Create New_QA_Server(Terraform)	--> 	Configure New_QA_Server(Ansible)
		
																																				|
																																				|
																																				|
																																	
																																		Deploy to New_QA_Server
																																		
																																				|
																																				|
																																				|
																																				
																																		Automated Testing
																																		
																																				|
																																				|
																																				|
																																				
																																		Notify the developers
																																				
																																				|
																																				|
																																				|
																																				
																																		Delete the New_QA_Server
																																		
		ArgoCD 
		
		Artifactory Libraries :::
		
		Code Build --> s3 bucket / jfrog Artifactory Library / Azure Artifacts   ===? Used to maintain the snapshot/version of application artifacts.
		
		github 		-- source code 
		s3 bucket 	-- source code 
		
		
		Azure DevOps Services : 
		
			- AzBoards				--> ALM(Application Lifecycle Management) Tool : / Jira
			
			- AzRepos				--> Distributed VCS / github
			
			- AzPipelines			--> Jenkins / github Actions
			
			- AzTest				--> Enable Automated testing
			
			- AzArtifacts
		
		
		ACS / ACR - DOCKERHUB / 
		
		
		
		DevOps ==> DevSecOps
		
			IT Security Team:
			
				 static code analyzer
				 
					sonarqube server ==> code scan -- ensure the code quality / code coverage
				 
				 dynamic code analyzer
			
			
		
																																		


#######################
Day 8 - 9th Mar. 2025
#######################																															
	Q&A 
	
	Review
	
	
	AWS Cloud Watch :::
	
		AWS Monitoring/Logging tool:
		
			Limited access to Cloud Watch 
			
				Prometheus/Grafana 
				
				
	Build :
		Create artifact 
		
	
	vi Dockerfile :
	
		FROM tomcat:8.0
		COPY ./target/loksaieta.war /usr/local/tomcat/webapps
		EXPOSE 8080
		
	docker build -t <dockerhub_repo>/webappimg1:v1.0 .					# Dockerfile reference path
	
	
	docker login -u <login_id>
	
	password: <dockerhub - PAT>			# AWS Credential Manager # encrypted
	
	docker push <dockerhub_repo>/webappimg1:v1.0
	
	Target Server:
	
	QA :
	
		docker run -it <dockerhub_repo>/webappimg1:v1.0 -p 8089:8080 bash
		
		<public_ip_addr>:8089			Run and Test the Application running in the container thru web browser.
	
	
		
	AWS Cloud 
		
	Git / Jenkins / Docker / Kubernetes / Prometheus/Grafana with Kubernetes / Terraform / Ansible 


	cicd pipeline using jenkins & kubernetes
	
	
	Maven Build Tool ::: ?
	

	Application Build :
	
		Maven/Gradle		# Used to Build Java Applications
		
		1. pom.xml 			# Project Object Model. To define the properties, dependencies and plugins to build java application
		
		2. maven goal		# Objective :
		
			mvn clean 		# To the Target Directory
			
			mvn compile 	# Compile the source code 
			
			mvn test 		# Perform Code Compilation and Unit Testing 
			
			mvn package 	# Compile, Unit Test and Create Artifacts
			
			mvn clean package 
			
			
		
		
	CICD Pipeline : 
	
	Stages :
	
	1. SCM_Checkout
	
	2. Application Build 
	
	3. Application Image Build 				# Dockerfile 
	
	4. Publish Application Image to Container Registry 
	
	5. Deploy to Kubernetes_Cluser 
	
	
	
	Jenkins Architecture :::
	
		Jenkins_Master (VM)							# To Create Jenkins Pipeline Project and schedule to run in build agents.
													# git,jdk,jenkins,<application Build Tool>
						
			Jenkins_Slave_Node (VM)					# Used to run the Application Build and Create Artifacts
													# git,<application Build Tool>
													
		Scenario 1:	if the build frequency is very less with just one application build tool 
					only jenkins master node.
					
		Scenario 2: 
		
				
			Jenkins_Master (VM)							# To Create Jenkins Pipeline Project and schedule to run in build agents.
														# git,jdk,jenkins,<application Build Tool>
		
				Jenkins_Slave_Node1 (VM)				# Java_Application_Build(jdk,git,maven)
				Jenkins_Slave_Node2 (VM)				# Python_(git,python)
				Jenkins_Slave_Node3 (VM)				# .Net (.net sdk)
				Jenkins_Slave_Node4 (VM)				# NodeJS 
				Jenkins_Slave_Node5 (VM)				# Angular
				
	
pipeline {

    agent { label 'slave1' }


	environment {	
		DOCKERHUB_CREDENTIALS=credentials('dockerloginid')
	}
	
    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/EDU-Monitoring-Feb25/devops-java-webapp.git'
            }
        }
        stage('Application_Build') {
            steps {
                echo 'Perform Maven Build'
				sh 'mvn clean package'
            }
        }
        stage('Build Docker Image') {
            steps {
				sh 'docker version'
				sh "docker build -t loksaieta/edu-eta-app:${BUILD_NUMBER} ."
				sh 'docker image list'
				sh "docker tag loksaieta/edu-eta-app:${BUILD_NUMBER} loksaieta/edu-eta-app:latest"
            }
        }
		stage('Login2DockerHub') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}
		stage('Publish_to_Docker_Registry') {
			steps {
				sh "docker push loksaieta/edu-eta-app:latest"
			}
		}
		stage('Deploy to Kubernetes') {
            steps {
				script {
				sshPublisher(publishers: [sshPublisherDesc(configName: 'Kubernetes-Master', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'kubectl apply -f k8smvndeployment.yaml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'k8smvndeployment.yaml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
			}	
            }
		}
    }
}		
				




		Jenkins_Master (VM)							# To Create Jenkins Pipeline Project and schedule to run in build agents.
													# git,jdk,jenkins,<application Build Tool>
	
			Jenkins_Slave_Node1 (VM)				# Java_Application_Build(jdk,git,maven)

		Kubernetes_Master
			Kubernetes_WN1							Region1
			Kubernetes_WN2							Region1 



		Github	repo Src_code  		
			
			GitHub_Action - Create CICD Pipeline 
					- Github-Action Runner 			# build Server
					
					- Target Server 				# Deployment 
						- Kubernetes_Cluster 					

				


